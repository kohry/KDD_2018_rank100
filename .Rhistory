na.locf(aa)
aa <- c(NA, NA, 1,2, NA,6, NA ,NA, NA)
na.locf(aa)
na.locf(aa, na.rm = F)
bb <- na.locf(aa)
cc <- na.locf(bb, fromLast = T)
cc
aa <- c(NA, NA, 1,2, NA,6, NA ,NA, NA)
bb <- na.locf(aa)
bb
aa <- c(NA, NA, 1,2, NA,6, NA ,NA, NA)
bb <- na.approx(aa, na.rm = F)
cc <- na.locf(bb, na.rm = F)
dd <- na.locf(cc, fromLast = T)
dd
ppp %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp$temperature <- ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp
ppp[4:7,] <- ppp[4:7,] %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp
ppp$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp$weather <- ppp$weather %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp
ppp <- merged_forecast %>% filter(stationId == city_list[ind]) %>% arrange(date)
ppp2 <- ppp
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
head(ppp2,20)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2
ppp2$weather_code <- ppp$weather_code %>% na.locf(na.rm = F)
head(ppp2,20)
a <- c(NA, NA , "aa","aa",NA,"bb",NA)
a
a <- c(NA, NA , as.factor("aa"),as.factor("aa"),NA,as.factor("bb"),NA)
a
a <- c(NA, NA , "aa","aa",NA,"bb",NA)
a
na.locf(a)
na.locf(a, na.rm = F)
a %>% na.locf(na.rm = F)
a %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp <- merged_forecast %>% filter(stationId == city_list[ind]) %>% arrange(date)
ppp2 <- ppp
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_code <- ppp$weather_code %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
head(ppp2,20)
ppp2$weather <- ppp$weather %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
head(ppp2,20)
for (inda in 1:length(city_list)) {
ppp <- merged_forecast %>% filter(stationId == city_list[ind]) %>% arrange(date)
ppp2 <- ppp
ppp2$temperature <- ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather <- ppp$weather %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
}
stretched_forecast <- merged_forecast[0,]
stretched_forecast
stretched_forecast <- merged_forecast[0,] # copy dataframe structure with empty data
for (inda in 1:length(city_list)) {
ppp <- merged_forecast %>% filter(stationId == city_list[ind]) %>% arrange(date)
ppp2 <- ppp
ppp2$temperature <- ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather <- ppp$weather %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
stretched_forecast <- rbind(ppp2, stretched_forecast)
}
stretched_forecast
for (inda in 1:length(city_list)) {
ppp <- merged_forecast %>% filter(stationId == city_list[ind]) %>% arrange(date)
ppp2 <- ppp
ppp2$temperature <- ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_cloud <- ppp$weather_cloud %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather <- ppp$weather %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_desc <- ppp$weather_desc %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
stretched_forecast <- rbind(ppp2, stretched_forecast)
}
stretched_forecast <- merged_forecast[0,] # copy dataframe structure with empty data
for (inda in 1:length(city_list)) {
ppp <- merged_forecast %>% filter(stationId == city_list[ind]) %>% arrange(date)
ppp2 <- ppp
ppp2$temperature <- ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_cloud <- ppp$weather_cloud %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather <- ppp$weather %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_desc <- ppp$weather_desc %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
stretched_forecast <- rbind(ppp2, stretched_forecast)
}
stretched_forecast
# join all together
lags
stretched_forecast
# join all together
purified_lags <- lags %>% select(stationId, PM2.5, PM10, O3)
purified_lags
stretched_forecast
stretched_forecast$stationId
str(stretched_forecast)
joined_data <- merge(x = stretched_forecast, y = purified_lags, by = c("stationId"), all.x = TRUE)
head(joined_data)
head(purified_lags)
head(joined_data %>% filter(stationId == 1))
head(joined_data %>% filter(stationId == "daxing_aq"))
joined_data
#각각의 최대 거시기를 뽑아줌. (각각 도시마다 최근 관측된 오염도가 다르니 이걸 탐지하고 lag를 뽑아줌.)
for (ind in 1:length(city_list)) {
pol2 <- pol %>% filter(stationId == city_list[ind]) %>% arrange(desc(date)) %>% select(stationId, date, PM2.5, PM10, O3)
for(searchi in 1:10) { # 안찾아질수도 있으므로, 10번까지는 찾아본다.
polhead <- pol2[searchi,]
if (!is.na(polhead$PM2.5)) break
}
lag <- as.numeric(difftime(currentTime, polhead[1,]$date, units ="hours"))
lags[ind,] = c(as.character(polhead$date), polhead$stationId, polhead$PM2.5, polhead$O3, lag)
}
# join all together
purified_lags <- lags %>% select(stationId, PM2.5, PM10, O3)
joined_data <- merge(x = stretched_forecast, y = purified_lags, by = c("stationId"), all.x = TRUE)
head(joined_data %>% filter(stationId == "daxing_aq"))
joined_data
tail(joined_data)
head(joined_data)
stretched_forecast <- merged_forecast[0,] # copy dataframe structure with empty data
for (inda in 1:length(city_list)) {
ppp <- merged_forecast %>% filter(stationId == city_list[ind]) %>% arrange(date)
ppp2 <- ppp
ppp2$temperature <- ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_cloud <- ppp$weather_cloud %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather <- ppp$weather %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_desc <- ppp$weather_desc %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
stretched_forecast <- rbind(ppp2, stretched_forecast)
}
colnames(pollution) <- c("x", "id", "stationId", "date", "PM2.5","PM10","NO2","CO","O3","SO2")
date <- c()
PM2.5 <- c()
O3 <- c()
stationId <- c()
lag <- c()
#lags <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("date", "stationId", "PM2.5", "O3","lag"))
lags <- data.frame(date = character(), stationId = character(), PM2.5 = numeric(), PM10 = numeric(), O3 = numeric(), stringsAsFactors = F)
#각각의 최대 거시기를 뽑아줌. (각각 도시마다 최근 관측된 오염도가 다르니 이걸 탐지하고 lag를 뽑아줌.)
for (ind in 1:length(city_list)) {
pol2 <- pol %>% filter(stationId == city_list[ind]) %>% arrange(desc(date)) %>% select(stationId, date, PM2.5, PM10, O3)
for(searchi in 1:10) { # 안찾아질수도 있으므로, 10번까지는 찾아본다.
polhead <- pol2[searchi,]
if (!is.na(polhead$PM2.5)) break
}
lag <- as.numeric(difftime(currentTime, polhead[1,]$date, units ="hours"))
lags[ind,] = c(as.character(polhead$date), polhead$stationId, polhead$PM2.5, polhead$O3, lag)
}
# join all together
purified_lags <- lags %>% select(stationId, PM2.5, PM10, O3)
joined_data <- merge(x = stretched_forecast, y = purified_lags, by = c("stationId"), all.x = TRUE)
head(joined_data %>% filter(stationId == "daxing_aq"))
joined_data
tail(joined_data)
purified_lags
joined_data
for (inda in 1:length(city_list)) {
ppp <- merged_forecast %>% filter(stationId == city_list[ind]) %>% arrange(date)
ppp2 <- ppp
ppp2$temperature <- ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_cloud <- ppp$weather_cloud %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather <- ppp$weather %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_desc <- ppp$weather_desc %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
stretched_forecast <- rbind(ppp2, stretched_forecast)
}
tail(stretched_forecast)
stretched_forecast <- merged_forecast[0,] # copy dataframe structure with empty data
for (inda in 1:length(city_list)) {
ppp <- merged_forecast %>% filter(stationId == city_list[inda]) %>% arrange(date)
ppp2 <- ppp
ppp2$temperature <- ppp$temperature %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$pressure <- ppp$pressure %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$humidity <- ppp$humidity %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_rain <- ppp$weather_rain %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_speed <- ppp$wind_speed %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$wind_direction <- ppp$wind_direction %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_cloud <- ppp$weather_cloud %>% na.approx(na.rm = F) %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather <- ppp$weather %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
ppp2$weather_desc <- ppp$weather_desc %>% na.locf(na.rm = F) %>% na.locf(fromLast = T, na.rm = F)
stretched_forecast <- rbind( stretched_forecast, ppp2)
}
head(stretched_forecast)
tail(stretched_forecast)
####################################### making lag
colnames(pollution) <- c("x", "id", "stationId", "date", "PM2.5","PM10","NO2","CO","O3","SO2")
date <- c()
PM2.5 <- c()
O3 <- c()
stationId <- c()
lag <- c()
#lags <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("date", "stationId", "PM2.5", "O3","lag"))
lags <- data.frame(date = character(), stationId = character(), PM2.5 = numeric(), PM10 = numeric(), O3 = numeric(), stringsAsFactors = F)
#각각의 최대 거시기를 뽑아줌. (각각 도시마다 최근 관측된 오염도가 다르니 이걸 탐지하고 lag를 뽑아줌.)
for (ind in 1:length(city_list)) {
pol2 <- pol %>% filter(stationId == city_list[ind]) %>% arrange(desc(date)) %>% select(stationId, date, PM2.5, PM10, O3)
for(searchi in 1:10) { # 안찾아질수도 있으므로, 10번까지는 찾아본다.
polhead <- pol2[searchi,]
if (!is.na(polhead$PM2.5)) break
}
lag <- as.numeric(difftime(currentTime, polhead[1,]$date, units ="hours"))
lags[ind,] = c(as.character(polhead$date), polhead$stationId, polhead$PM2.5, polhead$O3, lag)
}
# join all together
purified_lags <- lags %>% select(stationId, PM2.5, PM10, O3)
joined_data <- merge(x = stretched_forecast, y = purified_lags, by = c("stationId"), all.x = TRUE)
head(joined_data %>% filter(stationId == "daxing_aq"))
purified_lags
stretched_forecast
stretched_forecast
stretched_forecast$stationId
levels(stretched_forecast$stationId)
(as.numeric(stretched_forecast$stationId))
purified_forecast <- stretched_forecast %>% mutate(stationidNum = as.numeric(stationId))
purified_forecast
purified_forecast <- stretched_forecast %>% mutate(stationIdNum = as.numeric(stationId))
purified_lags
joined_data <- merge(x = purified_forecast, y = purified_lags, by = c("stationIdNum", "stationId"), all.x = TRUE)
# join all together
purified_lags <- lags %>% select(stationId, PM2.5, PM10, O3)
purified_forecast <- stretched_forecast %>% mutate(stationIdNum = as.numeric(stationId))
joined_data <- merge(x = purified_forecast, y = purified_lags, by = c("stationIdNum", "stationId"), all.x = TRUE)
joined_data <- merge(x = purified_forecast, y = purified_lags, by.x = "stationIdNum", by.y= "stationId", all.x = TRUE)
joined_data
head(joined_data %>% filter(stationId == "daxing_aq"))
#lags <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("date", "stationId", "PM2.5", "O3","lag"))
lags <- data.frame(date = character(), stationId = character(), PM2.5 = numeric(), PM10 = numeric(), O3 = numeric(), lag = numeric(), stringsAsFactors = F)
#각각의 최대 거시기를 뽑아줌. (각각 도시마다 최근 관측된 오염도가 다르니 이걸 탐지하고 lag를 뽑아줌.)
for (ind in 1:length(city_list)) {
pol2 <- pol %>% filter(stationId == city_list[ind]) %>% arrange(desc(date)) %>% select(stationId, date, PM2.5, PM10, O3)
for(searchi in 1:10) { # 안찾아질수도 있으므로, 10번까지는 찾아본다.
polhead <- pol2[searchi,]
if (!is.na(polhead$PM2.5)) break
}
lag <- as.numeric(difftime(currentTime, polhead[1,]$date, units ="hours"))
lags[ind,] = c(as.character(polhead$date), polhead$stationId, polhead$PM2.5, polhead$O3, lag)
}
#lags <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("date", "stationId", "PM2.5", "O3","lag"))
lags <- data.frame(date = character(), stationId = character(), PM2.5 = numeric(), PM10 = numeric(), O3 = numeric(), lag = numeric(), stringsAsFactors = F)
#각각의 최대 거시기를 뽑아줌. (각각 도시마다 최근 관측된 오염도가 다르니 이걸 탐지하고 lag를 뽑아줌.)
for (ind in 1:length(city_list)) {
pol2 <- pol %>% filter(stationId == city_list[ind]) %>% arrange(desc(date)) %>% select(stationId, date, PM2.5, PM10, O3)
for(searchi in 1:10) { # 안찾아질수도 있으므로, 10번까지는 찾아본다.
polhead <- pol2[searchi,]
if (!is.na(polhead$PM2.5)) break
}
lag <- as.numeric(difftime(currentTime, polhead[1,]$date, units ="hours"))
lags[ind,] = c(as.character(polhead$date), polhead$stationId, polhead$PM2.5, polhead$PM10, polhead$O3, lag)
}
# join all together
purified_lags <- lags %>% select(stationId, PM2.5, PM10, O3)
purified_forecast <- stretched_forecast %>% mutate(stationIdNum = as.numeric(stationId))
joined_data <- merge(x = purified_forecast, y = purified_lags, by.x = "stationIdNum", by.y= "stationId", all.x = TRUE)
head(joined_data %>% filter(stationId == "daxing_aq"))
# join all together
purified_lags <- lags %>% select(stationId, PM2.5, PM10, O3, lag)
purified_forecast <- stretched_forecast %>% mutate(stationIdNum = as.numeric(stationId))
joined_data <- merge(x = purified_forecast, y = purified_lags, by.x = "stationIdNum", by.y= "stationId", all.x = TRUE)
head(joined_data %>% filter(stationId == "daxing_aq"))
submission <- read.csv("submission.csv")
submission
sub <- %>% separate(submission, c("stationId", "day"), "#")
sub <- separate(submission, c("stationId", "day"), "#")
sub <- separate(submission, into = c("stationId", "day"), "#")
sub <- separate(submission, into = c("stationId", "day"), sep = "#")
sub <- submisstion %>% separate("test_id", into = c("stationId", "day"), sep = "#")
sub <- submission %>% separate("test_id", into = c("stationId", "day"), sep = "#")
sub
nrow(sub)
match('dongsi_aq', city_list)
match('tiantan_aq', city_list)
isub =1
cursor <- sub[isub,]
cursor
stationIdNum <- match(cursor$stationId, city_list_china)
stationIdNum
str <- paste("xgbII_model_china",stationIdNum,isub, sep="_")
model <- xgb.load(str)
pm2 <- predict(model, joined_data)
raw_time <- joined_data %>% mutate(time = utc_time) %>% separate(time, c("y","m","d","h")) %>% filter(wind_direction < 361)
joined_data
raw_time <- joined_data %>% mutate(time = date) %>% separate(time, c("y","m","d","h")) %>% filter(wind_direction < 361)
raw_w <- raw_time %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h))
raw_w$day <- wday(raw_w$utc_time, label = T, locale="english")
raw_w$day <- wday(raw_w$date, label = T, locale="english")
raw_w$day <- wday(raw_w$date, label = T, locale="english")
cursor
purified_lags
purified_lags %>% filter(stationId == stationIdNum)
joined_data
joined_data %>% filter(stationId = cursor$stationId)
joined_data %>% filter(stationId == cursor$stationId)
joined_data %>% filter(stationId == cursor$stationId) %>% arrange(date)
joined_data %>% filter(stationId == cursor$stationId) %>% arrange(date)[isub,]
(joined_data %>% filter(stationId == cursor$stationId) %>% arrange(date))[isub,]
predictTarget <- (joined_data %>% filter(stationId == cursor$stationId) %>% arrange(date))[isub,]
predictTarget
predictTarget <- (joined_data %>% filter(stationId == cursor$stationId) %>% arrange(date))[isub,]
str <- paste("xgbII_model_china",stationIdNum,isub + predictTarget$lag - 1, sep="_")
str <- paste("xgbII_model_china",(stationIdNum,isub + predictTarget$lag - 1), sep="_")
str <- paste("xgbII_model_china",stationIdNum,(isub + predictTarget$lag - 1), sep="_")
lagindex <- (isub + predictTarget$lag - 1)
predictTarget$lag
lagindex <- (isub + as.numeric(predictTarget$lag) - 1)
lagindex <- (isub + as.numeric(predictTarget$lag) - 1)
str <- paste("xgbII_model_china",stationIdNum,lagindex, sep="_")
str
model <- xgb.load(str)
raw_time <- joined_data %>% mutate(time = date) %>% separate(time, c("y","m","d","h")) %>% filter(wind_direction < 361)
raw_w <- raw_time %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h))
raw_w$day <- wday(raw_w$date, label = T, locale="english")
str(raw_w)
str(joined_data)
purified_forecast <- stretched_forecast %>% mutate(stationIdNum = as.numeric(stationId), PM2.5 = as.numeric(PM2.5), O3 = as.numeric(PM10), lag = as.numeric(lag))
stretched_forecast
# join all together
purified_lags <- lags %>% select(stationId, PM2.5, PM10, O3, lag) %>% mutate(PM2.5 = as.numeric(PM2.5), O3 = as.numeric(PM10), lag = as.numeric(lag))
purified_forecast <- stretched_forecast %>% mutate(stationIdNum = as.numeric(stationId))
joined_data <- merge(x = purified_forecast, y = purified_lags, by.x = "stationIdNum", by.y= "stationId", all.x = TRUE)
head(joined_data %>% filter(stationId == "daxing_aq"))
raw_time <- joined_data %>% mutate(time = date) %>% separate(time, c("y","m","d","h")) %>% filter(wind_direction < 361)
raw_w <- raw_time %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h))
raw_w$day <- wday(raw_w$date, label = T, locale="english")
str(raw_w)
# XGBoost
onehot_h <- model.matrix(~h-1,raw_w )
onehot_m <- model.matrix(~m-1,raw_w)
raw_w
onehot_m <- model.matrix(~m-1,raw_w)
str(raw_time)
str(raw_time)
raw_time <- joined_data %>% mutate(time = date) %>% separate(time, c("y","m","d","h")) %>% filter(wind_direction < 361)
str(raw_time)
raw_w <- raw_time %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h))
raw_w$day <- wday(raw_w$date, label = T, locale="english")
str(raw_w)
##for template for input data
bulk_china <- read.csv("bulk.csv") %>% filter(stationId == 1786458)
df_aq_simple <- read.csv("beijing_17_18_aq.csv") %>% filter(stationId == city_list[1])
raw <- inner_join(df_aq_simple, bulk_china, by=c("utc_time" = "date"))
raw_time <- raw %>% mutate(time = utc_time) %>% separate(time, c("y","m","d","h")) %>% filter(wind_direction < 361)
raw_w <- raw_time %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h))
raw_w$day <- wday(raw_w$utc_time, label = T, locale="english")
raw_w$lag <- lag(raw_w$PM2.5,1)
str(raw_w)
raw_w[0,]
str(raw_w[0,])
template <- raw_w[0,]
d1 <- joined_data %>% mutate(time = date) %>% separate(time, c("y","m","d","h")) %>% filter(wind_direction < 361)
d2 <- d1 %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h))
d2$day <- wday(d2$date, label = T, locale="english")
str(d2)
d1 <- joined_data %>% mutate(time = date) %>% separate(time, c("y","m","d","h")) %>% filter(wind_direction < 361) %>% mutate(utc_time = date)
d2 <- d1 %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h))
d2$day <- wday(d2$date, label = T, locale="english")
str(d2)
joined_data
d1 <- joined_data %>% mutate(time = date) %>% separate(time, c("y","m","d","h")) %>% mutate(utc_time = date) %>% filter(stationIdNum == icity)
icity=1
d1 <- joined_data %>% mutate(time = date) %>% separate(time, c("y","m","d","h")) %>% mutate(utc_time = date) %>% filter(stationIdNum == icity)
d2 <- d1 %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h))
d2$day <- wday(d2$date, label = T, locale="english")
str(d2)
str(template)
str(d2)
d3 <- select(temparature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, PM2.5)
d3 <- select(temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, PM2.5)
str(d2)
d3 <- d2 %>% select(temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, PM2.5)
str(d3)
d3 <- d2 %>% mutate(lag = PM2.5) %>% select(temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag)
str(d3)
d2
d2 <- d1 %>% mutate(y = as.factor(y), m = as.factor(m), d = as.factor(d), h = as.factor(h)) %>% arrange(date)
d2$day <- wday(d2$date, label = T, locale="english")
str(template)
str(d2)
str(d2)
head(d2)
d3 <- d2 %>% mutate(lag = PM2.5) %>% select(temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag)
str(d3)
head(d3)
merge(template, d3)
merge(template, d3, all = T)
str(merge(template, d3, all = T))
d4 <- merge(template, d3, all = T) %>% select(temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag)
d4
d3 <- d2 %>% mutate(lag = PM2.5) %>% select(date, temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag)
head(d3)
d4 <- merge(template, d3, all = T) %>% select(temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag)
d4
d4 <- merge(template, d3, all = T) %>% select(date, temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag)
d4
d4 <- merge(template, d3, all = T) %>% select(date, temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag) %>% arrange(date)
d4
# XGBoost
onehot_h <- model.matrix(~h-1,d4)
onehot_m <- model.matrix(~m-1,d4)
str(d4)
d4 <- merge(template, d3, all = T) %>% select(date, temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag) %>% arrange(date)
str(d4)
head(d3)
d4 <- merge(template, d3, all = T) %>% select(date, temperature, pressure, humidity, weather, wind_speed, wind_direction, m, h, day, lag) %>% arrange(date)
str(d4)
d4 <- merge(template, d3, all = T)
str(d4)
str(template)
d4 <- merge(template, d3, all = T)
str(d4)
levels(template$weather)
levels(d3$weather) <- levels(template$weather)
str(d3)
levels(d3$weather) <- levels(template$weather)
levels(d3$m) <- levels(template$m)
levels(d3$h) <- levels(template$h)
levels(d3$h) <- levels(template$h)
str(d3)
str(template)
levels(d3$weather) <- levels(template$weather)
levels(d3$h) <- levels(template$h)
levels(d3$m) <- levels(template$m)
levels(d3$day) <- levels(template$day)
# XGBoost
onehot_h <- model.matrix(~h-1,d3)
onehot_m <- model.matrix(~m-1,d3)
onehot_weather <- model.matrix(~weather-1,d3 )
onehot_day <- model.matrix(~day-1, d3)
#added
raw_onehot <- cbind(d3, onehot_h,onehot_m, onehot_weather, onehot_day) %>% select(-weather, -h, -m, -day) %>% mutate(humidity = as.numeric(humidity))
#added
d4_onehot <- cbind(d3, onehot_h,onehot_m, onehot_weather, onehot_day) %>% select(-weather, -h, -m, -day) %>% mutate(humidity = as.numeric(humidity))
str(d4_onehot)
head(d4_onehot)
d5_matrix <- data.matrix(d4_onehot)
d5_matrix
#added
d4_onehot <- cbind(d3, onehot_h,onehot_m, onehot_weather, onehot_day) %>% select(-date, -weather, -h, -m, -day) %>% mutate(humidity = as.numeric(humidity))
d5_matrix <- data.matrix(d4_onehot)
d5_matrix
data_test
str(data_test)
data_test
d5_matrix
d5_matrix
d5_matrix
d5_matrix
d5_matrix[1,]
d2
iter=1
d5_matrix <- data.matrix(d4_onehot)
currentCursor <- d5_matrix[1,]
currentCursor
lagindex <- (iter + as.numeric(d2$lag[1,]) - 1)
d2
str(d2)
(d2$lag[1,])
d2$lag[1]
lagindex <- (iter + as.numeric(d2$lag[1]) - 1)
lagindex
icity
str <- paste("xgbII_model_china",icity,lagindex, sep="_")
model <- xgb.load(str)
predict(model, currentCursor)
currentCursor <- d5_matrix[1:2,]
lagindex <- (iter + as.numeric(d2$lag[1]) - 1)
str <- paste("xgbII_model_china",icity,lagindex, sep="_")
model <- xgb.load(str)
predict(model, currentCursor)
result[1]
result <- predict(model, currentCursor)
result[1]
sub
